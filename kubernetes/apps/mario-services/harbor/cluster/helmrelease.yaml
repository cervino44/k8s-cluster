---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: harbor-cluster
spec:
  interval: 30m
  chart:
    spec:
      chart: harbor
      version: 1.15.1
      sourceRef:
        kind: HelmRepository
        name: harbor
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    # portal:
    #   replicas: 2
    # core:
    #   replicas: 3
    # jobservice:
    #   replicas: 2
    # registry: 
    #   replicas: 3
    # trivy:
    #   replicas: 1  
    expose:
      type: ingress
      tls:
        # Enable TLS or not.
        # Delete the "ssl-redirect" annotations in "expose.ingress.annotations" when TLS is disabled and "expose.type" is "ingress"
        # Note: if the "expose.type" is "ingress" and TLS is disabled,
        # the port must be included in the command when pulling/pushing images.
        # Refer to https://github.com/goharbor/harbor/issues/5291 for details.
        enabled: true
        # The source of the tls certificate. Set as "auto", "secret"
        # or "none" and fill the information in the corresponding section
        # 1) auto: generate the tls certificate automatically
        # 2) secret: read the tls certificate from the specified secret.
        # The tls certificate can be generated manually or by cert manager
        # 3) none: configure no tls certificate for the ingress. If the default
        # tls certificate is configured in the ingress controller, choose this option
        certSource: auto
        auto:
          # The common name used to generate the certificate, it's necessary
          # when the type isn't "ingress"
          commonName: ""
        secret:
          # The name of secret which contains keys named:
          # "tls.crt" - the certificate
          # "tls.key" - the private key
          secretName: ""
      ingress:
        hosts:
          core: harbor.vegmond.net
        # set to the type of ingress controller if it has specific requirements.
        # leave as `default` for most ingress controllers.
        # set to `gce` if using the GCE ingress controller
        # set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
        # set to `alb` if using the ALB ingress controller
        # set to `f5-bigip` if using the F5 BIG-IP ingress controller
        controller: default
        className: internal
      clusterIP:
        # The name of ClusterIP service
        name: harbor
    externalURL: https://harbor.vegmond.net

    persistence:
      enabled: true
      # Setting it to "keep" to avoid removing PVCs during a helm delete
      # operation. Leaving it empty will delete PVCs after the chart deleted
      # (this does not apply for PVCs that are created for internal database
      # and redis components, i.e. they are never deleted automatically)
      resourcePolicy: "keep"
      persistentVolumeClaim:
        registry:
          storageClass: "csi-rbd-sc"
          subPath: ""
          accessMode: ReadWriteOnce
          size: 64Gi
        jobservice:
          jobLog:
            storageClass: "csi-rbd-sc"
            accessMode: ReadWriteOnce
            size: 1Gi
            annotations: {}
        trivy:
          storageClass: "csi-rbd-sc"
          accessMode: ReadWriteOnce
          size: 5Gi

      # Define which storage backend is used for registry to store
      # images and charts. Refer to
      # https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#storage
      # for the detail.
      imageChartStorage:
        disableredirect: true
        type: filesystem
        filesystem:
          rootdirectory: /storage
          #maxthreads: 100
        s3:
          # Set an existing secret for S3 accesskey and secretkey
          # keys in the secret should be REGISTRY_STORAGE_S3_ACCESSKEY and REGISTRY_STORAGE_S3_SECRETKEY for registry
          #existingSecret: ""
          region: us-west-1
          bucket: bucketname
          #accesskey: awsaccesskey
          #secretkey: awssecretkey
          #regionendpoint: http://myobjects.local
          #encrypt: false
          #keyid: mykeyid
          #secure: true
          #skipverify: false
          #v4auth: true
          #chunksize: "5242880"
          #rootdirectory: /s3/object/name/prefix
          #storageclass: STANDARD
          #multipartcopychunksize: "33554432"
          #multipartcopymaxconcurrency: 100
          #multipartcopythresholdsize: "33554432"

    harborAdminPassword: "Harbor12345"

    internalTLS:
      enabled: false

    ipFamily:
      ipv6:
        enabled: false
      ipv4:
        enabled: true

    imagePullPolicy: IfNotPresent

    # The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
    # Set it as "Recreate" when "RWM" for volumes isn't supported
    updateStrategy:
      type: Recreate

    # debug, info, warning, error or fatal
    logLevel: info

    # The name of the secret which contains key named "ca.crt". Setting this enables the
    # download link on portal to download the CA certificate when the certificate isn't
    # generated automatically
    caSecretName: ""

    # The secret key used for encryption. Must be a string of 16 chars.
    secretKey: "not-a-secure-key"
    # If using existingSecretSecretKey, the key must be secretKey
    # existingSecretSecretKey: ""

    metrics:
      enabled: true
      core:
        path: /metrics
        port: 8001
      registry:
        path: /metrics
        port: 8001
      jobservice:
        path: /metrics
        port: 8001
      exporter:
        path: /metrics
        port: 8001
      ## Create prometheus serviceMonitor to scrape harbor metrics.
      ## This requires the monitoring.coreos.com/v1 CRD. Please see
      ## https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md
      ##
      serviceMonitor:
        enabled: true
        additionalLabels: {}
        # Scrape interval. If not set, the Prometheus default scrape interval is used.
        interval: ""
        # Metric relabel configs to apply to samples before ingestion.
        metricRelabelings:
          []
          # - action: keep
        #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
        #   sourceLabels: [__name__]
        # Relabel configs to apply to samples before ingestion.
        relabelings:
          []
          # - sourceLabels: [__meta_kubernetes_pod_node_name]
          #   separator: ;
          #   regex: ^(.*)$
          #   targetLabel: nodename
        #   replacement: $1
        #   action: replace

    database:
      # if external database is used, set "type" to "external"
      # and fill the connection information in "external" section
      type: external
      external:
        host: "services-db"
        port: "5432"
        username: "harbor"
        coreDatabase: "harbor"
        existingSecret: "harbor.services-db.credentials.postgresql.acid.zalan.do"

    redis:
      # if external Redis is used, set "type" to "external"
      # and fill the connection information in "external" section
      type: external
      external:
        addr: "redis-cluster-headless:6379"
        # The "coreDatabaseIndex" must be "0" as the library Harbor
        # used doesn't support configuring it
        # harborDatabaseIndex defaults to "0", but it can be configured to "6", this config is optional
        # cacheLayerDatabaseIndex defaults to "0", but it can be configured to "7", this config is optional
        coreDatabaseIndex: "0"
        jobserviceDatabaseIndex: "0"
        registryDatabaseIndex: "0"
        trivyAdapterIndex: "0"
        # harborDatabaseIndex: "6"
        # cacheLayerDatabaseIndex: "7"
        # username field can be an empty string, and it will be authenticated against the default user
        username: ""
        password: ""
        # If using existingSecret, the key must be REDIS_PASSWORD
        existingSecret: ""

