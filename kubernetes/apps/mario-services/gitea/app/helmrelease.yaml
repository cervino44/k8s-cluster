---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gitea
spec:
  interval: 30m
  chart:
    spec:
      chart: gitea
      sourceRef:
        kind: HelmRepository
        name: gitea
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    # global:
    #   hostAliases: 
    #     - hostnames:
    #       - gitea.vegmond.net

    ## @param replicaCount number of replicas for the deployment
    replicaCount: 3

    ## @section strategy
    ## @param strategy.type strategy type
    ## @param strategy.rollingUpdate.maxSurge maxSurge
    ## @param strategy.rollingUpdate.maxUnavailable maxUnavailable
    strategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxSurge: "100%"
        maxUnavailable: 1

    ## @param clusterDomain cluster domain
    clusterDomain: cluster.local

    image:
      registry: ""
      repository: gitea/gitea
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""

    ## @section Service
      http:
        type: ClusterIP
        port: 3000
        clusterIP: None
        loadBalancerIP:
        nodePort:
        externalTrafficPolicy:
        externalIPs:
        ipFamilyPolicy:
        ipFamilies:
        loadBalancerSourceRanges: []
        annotations: {}
        labels: {}
        loadBalancerClass:
      ssh:
        type: ClusterIP
        port: 22
        clusterIP: None
        loadBalancerIP:
        nodePort:
        externalTrafficPolicy:
        externalIPs:
        ipFamilyPolicy:
        ipFamilies:
        hostPort:
        loadBalancerSourceRanges: []
        annotations: {}
        labels: {}
        loadBalancerClass:

    ingress:
      enabled: true
      # className: nginx
      className: internal
      annotations:
        {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: gitea.vegmond.net
          paths:
            - path: /
              pathType: Prefix

    deployment:
      env:
        []
        # - name: VARIABLE
        #   value: my-value
      terminationGracePeriodSeconds: 60
      labels: {}
      annotations: {}


    ## @section Persistence
    #
    ## @param persistence.enabled Enable persistent storage
    ## @param persistence.create Whether to create the persistentVolumeClaim for shared storage
    ## @param persistence.mount Whether the persistentVolumeClaim should be mounted (even if not created)
    ## @param persistence.claimName Use an existing claim to store repository information
    ## @param persistence.size Size for persistence to store repo information
    ## @param persistence.accessModes AccessMode for persistence
    ## @param persistence.labels Labels for the persistence volume claim to be created
    ## @param persistence.annotations.helm.sh/resource-policy Resource policy for the persistence volume claim
    ## @param persistence.storageClass Name of the storage class to use
    ## @param persistence.subPath Subdirectory of the volume to mount at
    ## @param persistence.volumeName Name of persistent volume in PVC
    persistence:
      enabled: true
      create: true
      mount: true
      claimName: gitea-shared-storage
      size: 100Gi
      accessModes:
        - ReadWriteOnce
      labels: {}
      storageClass:
      subPath:
      volumeName: ""
      annotations:
        helm.sh/resource-policy: keep

    ## @section Gitea
    #
    gitea:
      admin:
        # existingSecret: gitea-admin-secret
        existingSecret:
        username: gitea_admin
        password: r8sA8CPHD9!bt6d
        email: "gitea@local.domain"
        passwordMode: keepUpdated

      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          #  additionalLabels:
          #    prometheus-release: prom1

      ## @param gitea.ldap LDAP configuration
      ldap:
        []
        # - name: "LDAP 1"
        #  existingSecret:
        #  securityProtocol:
        #  host:
        #  port:
        #  userSearchBase:
        #  userFilter:
        #  adminFilter:
        #  emailAttribute:
        #  bindDn:
        #  bindPassword:
        #  usernameAttribute:
        #  publicSSHKeyAttribute:

      # Either specify inline `key` and `secret` or refer to them via `existingSecret`
      ## @param gitea.oauth OAuth configuration
      oauth:
        []
        # - name: 'OAuth 1'
        #   provider:
        #   key:
        #   secret:
        #   existingSecret:
        #   autoDiscoverUrl:
        #   useCustomUrls:
        #   customAuthUrl:
        #   customTokenUrl:
        #   customProfileUrl:
        #   customEmailUrl:

      config:
        server:
          SSH_PORT: 22 # rootful image
          SSH_LISTEN_PORT: 2222 # rootless image
      #
      #  security:
      #    PASSWORD_COMPLEXITY: spec


    ## @section redis-cluster
    ## @param redis-cluster.enabled Enable redis cluster
    ## @param redis-cluster.usePassword Whether to use password authentication
    ## @param redis-cluster.cluster.nodes Number of redis cluster master nodes
    ## @param redis-cluster.cluster.replicas Number of redis cluster master node replicas
    ## @descriptionStart
    ## Redis cluster and [Redis](#redis) cannot be enabled at the same time.
    ## @descriptionEnd
    redis-cluster:
      enabled: true
      usePassword: false
      cluster:
        nodes: 3 # default: 6
        replicas: 0 # default: 1

    ## @section redis
    ## @param redis.enabled Enable redis standalone or replicated
    ## @param redis.architecture Whether to use standalone or replication
    ## @param redis.global.redis.password Required password
    ## @param redis.master.count Number of Redis master instances to deploy
    ## @descriptionStart
    ## Redis and [Redis cluster](#redis-cluster) cannot be enabled at the same time.
    ## @descriptionEnd
    redis:
      enabled: false
      architecture: standalone
      global:
        redis:
          password: changeme
      master:
        count: 1

    ## @section PostgreSQL HA
    #
    ## @param postgresql-ha.enabled Enable PostgreSQL HA
    ## @param postgresql-ha.postgresql.password Password for the `gitea` user (overrides `auth.password`)
    ## @param postgresql-ha.global.postgresql.database Name for a custom database to create (overrides `auth.database`)
    ## @param postgresql-ha.global.postgresql.username Name for a custom user to create (overrides `auth.username`)
    ## @param postgresql-ha.global.postgresql.password Name for a custom password to create (overrides `auth.password`)
    ## @param postgresql-ha.postgresql.repmgrPassword Repmgr Password
    ## @param postgresql-ha.postgresql.postgresPassword postgres Password
    ## @param postgresql-ha.pgpool.adminPassword pgpool adminPassword
    ## @param postgresql-ha.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
    ## @param postgresql-ha.persistence.size PVC Storage Request for PostgreSQL HA volume
    postgresql-ha:
      global:
        postgresql:
          database: gitea
          password: gitea
          username: gitea
      enabled: true
      postgresql:
        repmgrPassword: changeme2
        postgresPassword: changeme1
        password: changeme4
      pgpool:
        adminPassword: changeme3
      service:
        ports:
          postgresql: 5432
      persistence:
        size: 10Gi

    ## @section PostgreSQL
    #
    ## @param postgresql.enabled Enable PostgreSQL
    ## @param postgresql.global.postgresql.auth.password Password for the `gitea` user (overrides `auth.password`)
    ## @param postgresql.global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
    ## @param postgresql.global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
    ## @param postgresql.global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
    ## @param postgresql.primary.persistence.size PVC Storage Request for PostgreSQL volume
    postgresql:
      enabled: false
      global:
        postgresql:
          auth:
            password: gitea
            database: gitea
            username: gitea
          service:
            ports:
              postgresql: 5432
      primary:
        persistence:
          size: 10Gi

    # By default, removed or moved settings that still remain in a user defined values.yaml will cause Helm to fail running the install/update.
    # Set it to false to skip this basic validation check.
    ## @section Advanced
    ## @param checkDeprecation Set it to false to skip this basic validation check.
    ## @param test.enabled Set it to false to disable test-connection Pod.
    ## @param test.image.name Image name for the wget container used in the test-connection Pod.
    ## @param test.image.tag Image tag for the wget container used in the test-connection Pod.
    checkDeprecation: true
    test:
      enabled: true
      image:
        name: busybox
        tag: latest

    ## @param extraDeploy Array of extra objects to deploy with the release
    ##
    extraDeploy: []