---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: schema
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      main:
        replicas: 1
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: confluentinc/cp-schema-registry
              tag: 7.7.0
            env:
              SCHEMA_REGISTRY_HOST_NAME:
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: mario-cluster-kafka-bootstrap:9092
              SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &port 8081
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities: { drop: ["ALL"] }
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: main
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: "{{ .Release.Name }}"
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2

          # type of authentication
          nginx.ingress.kubernetes.io/auth-type: basic
          # name of the secret that contains the user/password definitions
          nginx.ingress.kubernetes.io/auth-secret: digest-auth
          nginx.ingress.kubernetes.io/auth-secret-type: auth-map

          # message to display with an appropriate context why the authentication is required
          nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"

        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: "/{{.Release.Namespace}}(/|$)(.*)"
                pathType: ImplementationSpecific
                service:
                  identifier: app
                  port: http
